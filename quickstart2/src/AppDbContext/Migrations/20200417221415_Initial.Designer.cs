// <auto-generated />
using System;
using AppDbContext.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AppDbContext.Migrations
{
    [DbContext(typeof(CoreDbContext))]
    [Migration("20200417221415_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AppDbContext.Models.Appreciation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Evaluation")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("IdLineItem")
                        .HasColumnName("Id_LineItem")
                        .HasColumnType("int");

                    b.Property<int>("IdOrder")
                        .HasColumnName("Id_Order")
                        .HasColumnType("int");

                    b.Property<int>("IdPayment")
                        .HasColumnName("Id_Payment")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdLineItem");

                    b.HasIndex("IdOrder");

                    b.HasIndex("IdPayment");

                    b.ToTable("Appreciations");
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.Property<byte>("AccessFailedCount")
                        .HasColumnType("tinyint");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("IdCustomer")
                        .HasColumnName("Id_Customer")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("NormalizedUsername")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdCustomer");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("PK_ASPNETUSERLOGINS");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetUserRole", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.HasKey("RoleId", "UserId")
                        .HasName("PK_USERROLES");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.Property<string>("Value")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("LoginProvider", "Name", "UserId")
                        .HasName("PK_USERTOKENS");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AppDbContext.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("AppDbContext.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatePublication")
                        .HasColumnType("datetime");

                    b.Property<int>("IdEditor")
                        .HasColumnName("Id_Editor")
                        .HasColumnType("int");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasColumnName("ISBN")
                        .HasColumnType("varchar(13)")
                        .HasMaxLength(13)
                        .IsUnicode(false);

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<string>("Subtitle")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Summary")
                        .HasColumnType("char(255)")
                        .IsFixedLength(true)
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("char(255)")
                        .IsFixedLength(true)
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdEditor");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("AppDbContext.Models.Categorie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("char(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("AppDbContext.Models.Cowriter", b =>
                {
                    b.Property<int>("IdAuthor")
                        .HasColumnName("Id_Author")
                        .HasColumnType("int");

                    b.Property<int>("IdBook")
                        .HasColumnName("Id_Book")
                        .HasColumnType("int");

                    b.HasKey("IdAuthor", "IdBook")
                        .HasName("PK_COWRITERS");

                    b.HasIndex("IdBook");

                    b.ToTable("Cowriters");
                });

            modelBuilder.Entity("AppDbContext.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Acronyme")
                        .IsRequired()
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("char(255)")
                        .IsFixedLength(true)
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(13)")
                        .HasMaxLength(13)
                        .IsUnicode(false);

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("AppDbContext.Models.Editor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasColumnType("char(255)")
                        .IsFixedLength(true)
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Url")
                        .HasColumnName("URL")
                        .HasColumnType("char(255)")
                        .IsFixedLength(true)
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Editors");
                });

            modelBuilder.Entity("AppDbContext.Models.EfmigrationsHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.HasKey("MigrationId")
                        .HasName("PK_EFMIGRATIONSHISTORY");

                    b.ToTable("_EFMigrationsHistory");
                });

            modelBuilder.Entity("AppDbContext.Models.Format", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Formats");
                });

            modelBuilder.Entity("AppDbContext.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("AppDbContext.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nchar(3)")
                        .IsFixedLength(true)
                        .HasMaxLength(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("AppDbContext.Models.LineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdBook")
                        .HasColumnName("Id_Book")
                        .HasColumnType("int");

                    b.Property<int?>("IdOrder")
                        .HasColumnName("Id_Order")
                        .HasColumnType("int");

                    b.Property<int>("IdShoppingcart")
                        .HasColumnName("Id_Shoppingcart")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("IdBook");

                    b.HasIndex("IdShoppingcart");

                    b.ToTable("LineItems");
                });

            modelBuilder.Entity("AppDbContext.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OrderedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ShippedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("char(255)")
                        .IsFixedLength(true)
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AppDbContext.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("char(255)")
                        .IsFixedLength(true)
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("PriceTotal")
                        .HasColumnType("money");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("AppDbContext.Models.Rank", b =>
                {
                    b.Property<int>("IdBook")
                        .HasColumnName("Id_Book")
                        .HasColumnType("int");

                    b.Property<int>("IdCategorie")
                        .HasColumnName("Id_Categorie")
                        .HasColumnType("int");

                    b.Property<int>("IdGenre")
                        .HasColumnName("Id_Genre")
                        .HasColumnType("int");

                    b.Property<int>("IdFormat")
                        .HasColumnName("Id_Format")
                        .HasColumnType("int");

                    b.Property<int>("IdLanguage")
                        .HasColumnName("Id_Language")
                        .HasColumnType("int");

                    b.HasKey("IdBook", "IdCategorie", "IdGenre", "IdFormat", "IdLanguage")
                        .HasName("PK_RANKS");

                    b.HasIndex("IdCategorie");

                    b.HasIndex("IdFormat");

                    b.HasIndex("IdGenre");

                    b.HasIndex("IdLanguage");

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("AppDbContext.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("AppDbContext.Models.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("CurrentStock")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IdBook")
                        .HasColumnName("Id_Book")
                        .HasColumnType("int");

                    b.Property<short>("InitialStock")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("IdBook");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("AppDbContext.Models.Appreciation", b =>
                {
                    b.HasOne("AppDbContext.Models.LineItem", "IdLineItemNavigation")
                        .WithMany("Appreciations")
                        .HasForeignKey("IdLineItem")
                        .HasConstraintName("FK_APPRECIATIONS_LINEITEMS")
                        .IsRequired();

                    b.HasOne("AppDbContext.Models.Order", "IdOrderNavigation")
                        .WithMany("Appreciations")
                        .HasForeignKey("IdOrder")
                        .HasConstraintName("FK_APPRECIATIONS_ORDERS")
                        .IsRequired();

                    b.HasOne("AppDbContext.Models.Payment", "IdPaymentNavigation")
                        .WithMany("Appreciations")
                        .HasForeignKey("IdPayment")
                        .HasConstraintName("FK_APPRECIATIONS_PAYMENTS")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("AppDbContext.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RoleClaims_Roles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetUser", b =>
                {
                    b.HasOne("AppDbContext.Models.Customer", "IdCustomerNavigation")
                        .WithMany("AspNetUsers")
                        .HasForeignKey("IdCustomer")
                        .HasConstraintName("FK_USERS_CUSTOMERS")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("AppDbContext.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserClaims_Users_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("AppDbContext.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserLogins_Users_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetUserRole", b =>
                {
                    b.HasOne("AppDbContext.Models.AspNetRole", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRoles_Roles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDbContext.Models.AspNetUser", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRoles_Users_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetUserToken", b =>
                {
                    b.HasOne("AppDbContext.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserTokens_Users_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.Book", b =>
                {
                    b.HasOne("AppDbContext.Models.Editor", "IdEditorNavigation")
                        .WithMany("Books")
                        .HasForeignKey("IdEditor")
                        .HasConstraintName("FK_BOOKS_EDITORS")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.Cowriter", b =>
                {
                    b.HasOne("AppDbContext.Models.Author", "IdAuthorNavigation")
                        .WithMany("Cowriters")
                        .HasForeignKey("IdAuthor")
                        .HasConstraintName("FK_COWRITERS_AUTHORS")
                        .IsRequired();

                    b.HasOne("AppDbContext.Models.Book", "IdBookNavigation")
                        .WithMany("Cowriters")
                        .HasForeignKey("IdBook")
                        .HasConstraintName("FK_COWRITERS_BOOKS")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.LineItem", b =>
                {
                    b.HasOne("AppDbContext.Models.Book", "IdBookNavigation")
                        .WithMany("LineItems")
                        .HasForeignKey("IdBook")
                        .HasConstraintName("FK_LINEITEMS_BOOKS")
                        .IsRequired();

                    b.HasOne("AppDbContext.Models.ShoppingCart", "IdShoppingcartNavigation")
                        .WithMany("LineItems")
                        .HasForeignKey("IdShoppingcart")
                        .HasConstraintName("FK_LINEITEMS_SHOPPINGCARTS")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.Order", b =>
                {
                    b.HasOne("AppDbContext.Models.AspNetUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ORDERS_USERS")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.Payment", b =>
                {
                    b.HasOne("AppDbContext.Models.AspNetUser", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_PAYMENTS_USERS")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.Rank", b =>
                {
                    b.HasOne("AppDbContext.Models.Book", "IdBookNavigation")
                        .WithMany("Ranks")
                        .HasForeignKey("IdBook")
                        .HasConstraintName("FK_RANKS_BOOKS")
                        .IsRequired();

                    b.HasOne("AppDbContext.Models.Categorie", "IdCategorieNavigation")
                        .WithMany("Ranks")
                        .HasForeignKey("IdCategorie")
                        .HasConstraintName("FK_RANKS_CATEGORIES")
                        .IsRequired();

                    b.HasOne("AppDbContext.Models.Format", "IdFormatNavigation")
                        .WithMany("Ranks")
                        .HasForeignKey("IdFormat")
                        .HasConstraintName("FK_RANKS_FORMATS")
                        .IsRequired();

                    b.HasOne("AppDbContext.Models.Genre", "IdGenreNavigation")
                        .WithMany("Ranks")
                        .HasForeignKey("IdGenre")
                        .HasConstraintName("FK_RANKS_GENRES")
                        .IsRequired();

                    b.HasOne("AppDbContext.Models.Language", "IdLanguageNavigation")
                        .WithMany("Ranks")
                        .HasForeignKey("IdLanguage")
                        .HasConstraintName("FK_RANKS_LANGUAGES")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.ShoppingCart", b =>
                {
                    b.HasOne("AppDbContext.Models.AspNetUser", "User")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SHOPPINGCARTS_USERS")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.Stock", b =>
                {
                    b.HasOne("AppDbContext.Models.Book", "IdBookNavigation")
                        .WithMany("Stocks")
                        .HasForeignKey("IdBook")
                        .HasConstraintName("FK_STOCKS_BOOKS")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
